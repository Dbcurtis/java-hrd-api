/*
 * CommSetupInput.java
 *
 * Created on Jan 19, 2010, 10:49:33 AM
 */
package net.dbcrd.radiopackage;

import gnu.io.CommPortIdentifier;
import java.util.NavigableSet;
import java.util.Set;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import net.dbcrd.radiopackage.omnirigserial.ClassPreamble;
import net.dbcrd.radiopackage.omnirigserial.ClassPreamble;
import net.dbcrd.radiopackage.FlowCtlSel;

/**
 * Provides a user interface to CommSetup.
 * @author dbcurtis
 */

@ClassPreamble(date="4/6/2010")
public class CommSetupInput extends javax.swing.JDialog {

    private static final Logger THE_LOGGER =
            Logger.getLogger( CommSetupInput.class.getName());
    private final static Preferences PREFS = Preferences.userRoot().node(CommSetupInput.class.getName());
    
    private final static String PARITY = "Parity";
    private final static String STOPS = "Stops";
    private final static String DATAB = "Datab";
    private final static String SERIAL = "Serial";
    private final static String COMPORT = "Comport";
    private final static String TCP = "TCP";
    private final static String BAUD = "baud";
    private final static String TCPHOST = "TCPHost";
    private final static String TCPPORT = "TCPPort";
    private final static String FLOW = "Flowctl";
    private final static long serialVersionUID = 1289712987213128973L;
    private final static long ONE_SEC = 1000;
    private volatile boolean done = false;
    private volatile boolean cancel = false;

    private final static Pattern ARG_PAT = Pattern.compile("(comm|virtual)", Pattern.CASE_INSENSITIVE);


    /**
     * Creates new form CommSetupInput
     * @param parent a Frame for the parent
     * @param modal a boolean
     */
     CommSetupInput(final java.awt.Frame parent, final boolean modal) {
        super(parent, modal);
        initComponents();
        final Set<CommPortIdentifier> allports = CommSetup.getAllSerialPorts();
        final NavigableSet<String> avpts = new ConcurrentSkipListSet<String>();
        for (CommPortIdentifier cpi : allports) {
            avpts.add(cpi.getName());
        }
        jCBOXComm.setModel(new DefaultComboBoxModel(avpts.toArray(new String[1])));
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        bGParity = new javax.swing.ButtonGroup();
        bGStop = new javax.swing.ButtonGroup();
        bGDwidth = new javax.swing.ButtonGroup();
        bGtype = new javax.swing.ButtonGroup();
        bgflowctl = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jCBOXComm = new javax.swing.JComboBox();
        jCMBOBaud = new javax.swing.JComboBox();
        jRBParityNone = new javax.swing.JRadioButton();
        jRBParityEven = new javax.swing.JRadioButton();
        jRBParityOdd = new javax.swing.JRadioButton();
        jRBstop1 = new javax.swing.JRadioButton();
        jRBstop15 = new javax.swing.JRadioButton();
        jRBstop2 = new javax.swing.JRadioButton();
        jRBdatabits5 = new javax.swing.JRadioButton();
        jRBdatabits6 = new javax.swing.JRadioButton();
        jRBdatabits7 = new javax.swing.JRadioButton();
        jRBdatabits8 = new javax.swing.JRadioButton();
        jBOK = new javax.swing.JButton();
        jBCancel = new javax.swing.JButton();
        jRBSelSerial = new javax.swing.JRadioButton();
        jRBSelTCP = new javax.swing.JRadioButton();
        jTFHost = new javax.swing.JTextField();
        jTFPort = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabelRadio = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jRFCNone = new javax.swing.JRadioButton();
        jRFCrts = new javax.swing.JRadioButton();
        jRFCxon = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Configure CAT Communication");

        jLabel2.setText("Comm Port:");

        jLabel3.setText("Baud:");

        jLabel6.setText("Stop Bit:");

        jLabel7.setText("Data Bits:");

        jLabel8.setText("Parity:");

        jCBOXComm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCBOXComm, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jCBOXComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBOXCommActionPerformed(evt);
            }
        });

        jCMBOBaud.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "50", "300", "1200", "2400", "4800", "9600", "19200", "38400", "57600", "115200", "" }));
        jCMBOBaud.setSelectedIndex(8);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCMBOBaud, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        bGParity.add(jRBParityNone);
        jRBParityNone.setSelected(true);
        jRBParityNone.setText("None");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRBParityNone, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jRBParityNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBParityNoneActionPerformed(evt);
            }
        });

        bGParity.add(jRBParityEven);
        jRBParityEven.setText("Even");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRBParityEven, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        bGParity.add(jRBParityOdd);
        jRBParityOdd.setText("Odd");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRBParityOdd, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jRBParityOdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBParityOddActionPerformed(evt);
            }
        });

        bGStop.add(jRBstop1);
        jRBstop1.setSelected(true);
        jRBstop1.setText("1 stop bit");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRBstop1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jRBstop1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBstop1ActionPerformed(evt);
            }
        });

        bGStop.add(jRBstop15);
        jRBstop15.setText("1.5 stop bit");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRBstop15, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        bGStop.add(jRBstop2);
        jRBstop2.setText("2 stop bit");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRBstop2, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        bGDwidth.add(jRBdatabits5);
        jRBdatabits5.setText("5bits");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRBdatabits5, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        bGDwidth.add(jRBdatabits6);
        jRBdatabits6.setText("6bits");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRBdatabits6, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        bGDwidth.add(jRBdatabits7);
        jRBdatabits7.setText("7bits");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRBdatabits7, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        bGDwidth.add(jRBdatabits8);
        jRBdatabits8.setSelected(true);
        jRBdatabits8.setText("8bits");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelSerial, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jRBdatabits8, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jBOK.setText("OK");
        jBOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBOKActionPerformed(evt);
            }
        });

        jBCancel.setText("Cancel");
        jBCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelActionPerformed(evt);
            }
        });

        bGtype.add(jRBSelSerial);
        jRBSelSerial.setSelected(true);
        jRBSelSerial.setText("Serial");
        jRBSelSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBSelSerialActionPerformed(evt);
            }
        });

        bGtype.add(jRBSelTCP);
        jRBSelTCP.setText("TCP/IP");
        jRBSelTCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBSelTCPActionPerformed(evt);
            }
        });

        jTFHost.setText("localhost");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelTCP, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTFHost, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jTFHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFHostActionPerformed(evt);
            }
        });

        jTFPort.setText("7809");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRBSelTCP, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTFPort, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel9.setText("Host:");

        jLabel10.setText("Port:");

        jLabelRadio.setText(" ");

        jLabel5.setText("Flow Ctl");

        bgflowctl.add(jRFCNone);
        jRFCNone.setSelected(true);
        jRFCNone.setText("None");

        bgflowctl.add(jRFCrts);
        jRFCrts.setText("CTS/RTS");
        jRFCrts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRFCrtsActionPerformed(evt);
            }
        });

        bgflowctl.add(jRFCxon);
        jRFCxon.setText("XON/OFF");
        jRFCxon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRFCxonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabelRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jCMBOBaud, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCBOXComm, 0, 167, Short.MAX_VALUE)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel6)
                                .addComponent(jLabel8)
                                .addComponent(jLabel9)
                                .addComponent(jLabel10))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jRBdatabits5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jRBdatabits6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jRBdatabits7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jRBdatabits8))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTFPort, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTFHost, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jRBParityNone)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jRBParityEven)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jRBParityOdd)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jRBstop1)
                                        .addComponent(jRFCNone))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jRBstop15)
                                        .addComponent(jRFCrts))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jRFCxon)
                                        .addComponent(jRBstop2)))))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jBCancel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jRBSelSerial)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jRBSelTCP))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jBOK)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCBOXComm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jCMBOBaud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jRFCNone)
                    .addComponent(jRFCrts)
                    .addComponent(jRFCxon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jRBstop1)
                    .addComponent(jRBstop15)
                    .addComponent(jRBstop2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jRBdatabits5)
                    .addComponent(jRBdatabits6)
                    .addComponent(jRBdatabits7)
                    .addComponent(jRBdatabits8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jRBParityNone)
                    .addComponent(jRBParityEven)
                    .addComponent(jRBParityOdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jBOK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBCancel)
                    .addComponent(jRBSelSerial)
                    .addComponent(jRBSelTCP))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRBParityNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBParityNoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRBParityNoneActionPerformed

    private void jRBParityOddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBParityOddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRBParityOddActionPerformed

    private void jBOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBOKActionPerformed

        setVisible(false);
        cancel=false;
        done=true;

    }//GEN-LAST:event_jBOKActionPerformed

    private void jBCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelActionPerformed

        setVisible(false);
        cancel=true;
        done=true;


    }//GEN-LAST:event_jBCancelActionPerformed

    private void jRBstop1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBstop1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRBstop1ActionPerformed

    private void jCBOXCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBOXCommActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBOXCommActionPerformed

    private void jRBSelSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBSelSerialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRBSelSerialActionPerformed

    private void jRBSelTCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBSelTCPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRBSelTCPActionPerformed

    private void jTFHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFHostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFHostActionPerformed

    private void jRFCrtsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRFCrtsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRFCrtsActionPerformed

    private void jRFCxonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRFCxonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRFCxonActionPerformed
  

    /**
     * Invokes the user interface for setting up the CAT.  Will initialize to the last selected values.
     * @param args the command line arguments (args[0] must have either "comm" or "virtual").
     * @return a CommSetup for the user selected communication options or null if canceled.
     */
    public static CommSetup main(final String args[]) {
        if (args.length != 1) {
            throw new IllegalArgumentException("missing argument to main");
        }

        final Matcher myMx = ARG_PAT.matcher(args[0].trim());
        if (!myMx.find()) {
            throw new IllegalArgumentException("wrong argument[0] to main");
        }

        final String arg = myMx.group().toLowerCase();
        final CommSetupInput dialog = new CommSetupInput(new javax.swing.JFrame(), true);
        if ("comm".equals(arg)) {
            dialog.jRBSelTCP.setSelected(false);
            dialog.jRBSelSerial.setSelected(true);
        }
        if ("virtual".equals(arg)) {
            dialog.jRBSelSerial.setSelected(false);
            dialog.jRBSelTCP.setSelected(true);
        }

        dialog.jRBParityOdd.setSelected(false);
        dialog.jRBParityEven.setSelected(false);
        dialog.jRBParityNone.setSelected(false);

        switch (CommSetup.SPortParity.valueOf(PREFS.get(PARITY, CommSetup.SPortParity.ODD.toString()))) {
            case ODD:
                dialog.jRBParityOdd.setSelected(true);
                break;
            case EVEN:
                dialog.jRBParityEven.setSelected(false);
                break;
            case NONE:
                dialog.jRBParityNone.setSelected(true);
                break;
            case MARK:
                dialog.jRBParityNone.setSelected(true);
                break;
            case SPACE:
                dialog.jRBParityNone.setSelected(true);
                break;
            default:
                break;

        }
        switch (FlowCtlSel.valueOf(PREFS.get(FLOW,FlowCtlSel.NONE.toString()))){
            default:
            case NONE:
                dialog.jRFCNone.setSelected(true);
                break;
            case CTS_RTS:
                dialog.jRFCrts.setSelected(true);
                break;
            case XON_OFF:
                dialog.jRFCxon.setSelected(true);
                THE_LOGGER.severe("XON_XOFF not yet implemented ******");

                break;
        }

        dialog.jRBstop1.setSelected(false);
        dialog.jRBstop15.setSelected(false);
        dialog.jRBstop2.setSelected(false);

        switch (CommSetup.SPortStopBits.valueOf(PREFS.get(STOPS, CommSetup.SPortStopBits.STOPBITS_1.toString()))) {
            case STOPBITS_1:
                dialog.jRBstop1.setSelected(true);
                break;
            case STOPBITS_1_5:
                dialog.jRBstop15.setSelected(true);
                break;
            case STOPBITS_2:
                dialog.jRBstop2.setSelected(true);
                break;
            default:
                break;
        }

        dialog.jRBdatabits5.setSelected(false);
        dialog.jRBdatabits6.setSelected(false);
        dialog.jRBdatabits7.setSelected(false);
        dialog.jRBdatabits8.setSelected(false);

        switch (CommSetup.SPortDataBits.valueOf(PREFS.get(DATAB, CommSetup.SPortDataBits.DATABITS_8.toString()))) {
            case DATABITS_5:
                dialog.jRBdatabits5.setSelected(true);
                break;
            case DATABITS_6:
                dialog.jRBdatabits6.setSelected(true);
                break;
            case DATABITS_7:
                dialog.jRBdatabits7.setSelected(true);
                break;
            case DATABITS_8:
                dialog.jRBdatabits8.setSelected(true);
                break;
            default:

        }

        dialog.jTFHost.setText(PREFS.get(TCPHOST, "localhost"));
        dialog.jTFPort.setText(PREFS.get(TCPPORT, "7809"));

        final ComboBoxModel mdl = dialog.jCMBOBaud.getModel();
        mdl.setSelectedItem(PREFS.get(BAUD, "9600"));
        dialog.jCBOXComm.setSelectedItem(PREFS.get(COMPORT, "COM1"));

        dialog.pack();
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(final java.awt.event.WindowEvent event) {
                        dialog.cancel = true;
                        dialog.done = true;
                    }
                });
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);
                dialog.setVisible(true);
            }
        });
        // wait for dialog to show up

        while (!dialog.isShowing()) {
            try {
                Thread.sleep(ONE_SEC);
            } catch (InterruptedException ex) {
                THE_LOGGER.log(Level.SEVERE, null, ex);
            }
        }
        // wait for dialog to end;

        while (!dialog.done) {
            try {
                Thread.sleep(ONE_SEC);
            } catch (InterruptedException ex) {
                THE_LOGGER.log(Level.SEVERE, null, ex);
            }
        }

//        java.awt.EventQueue.invokeLater(new Runnable() { // make non-visible
//
//            public void run() {
//                dialog.setVisible(false);
//            }
//        });

        if (dialog.cancel) {  //If a cancel, then dispose
            java.awt.EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    dialog.dispose();
                }
            });
            return null;  //return null if canceled.
        }
        /*
         * save the preferences
         */
        CommSetup.SPortParity sPortParity = CommSetup.SPortParity.ODD;
        sPortParity = dialog.jRBParityEven.isSelected() ? CommSetup.SPortParity.EVEN : sPortParity;
        sPortParity = dialog.jRBParityNone.isSelected() ? CommSetup.SPortParity.NONE : sPortParity;
        PREFS.put(PARITY, sPortParity.toString());

        CommSetup.SPortStopBits sPortStopBits = CommSetup.SPortStopBits.STOPBITS_1;
        sPortStopBits = dialog.jRBstop15.isSelected() ? CommSetup.SPortStopBits.STOPBITS_1_5 : sPortStopBits;
        sPortStopBits = dialog.jRBstop2.isSelected() ? CommSetup.SPortStopBits.STOPBITS_2 : sPortStopBits;
        PREFS.put(STOPS, sPortStopBits.toString());

        CommSetup.SPortDataBits sPortDataBits = CommSetup.SPortDataBits.DATABITS_8;
        sPortDataBits = dialog.jRBdatabits5.isSelected() ? CommSetup.SPortDataBits.DATABITS_5 : sPortDataBits;
        sPortDataBits = dialog.jRBdatabits6.isSelected() ? CommSetup.SPortDataBits.DATABITS_6 : sPortDataBits;
        sPortDataBits = dialog.jRBdatabits7.isSelected() ? CommSetup.SPortDataBits.DATABITS_7 : sPortDataBits;

        PREFS.put(DATAB, sPortDataBits.toString());
        PREFS.put(SERIAL, dialog.jRBSelSerial.isSelected() ? "true" : "false");
        PREFS.put(COMPORT, (String) dialog.jCBOXComm.getSelectedItem());
        PREFS.put(TCP, dialog.jRBSelTCP.isSelected() ? "true" : "false");
        PREFS.put(BAUD, (String) dialog.jCMBOBaud.getSelectedItem());
        PREFS.put(TCPHOST, dialog.jTFHost.getText());
        PREFS.put(TCPPORT, dialog.jTFPort.getText());
        FlowCtlSel flowc=FlowCtlSel.NONE;
        if (dialog.jRFCNone.isSelected()){
             flowc=FlowCtlSel.NONE;
        }else if(dialog.jRFCrts.isSelected()){
            flowc=FlowCtlSel.CTS_RTS;
        }else{
            flowc=FlowCtlSel.XON_OFF;
            THE_LOGGER.severe("XON_XOFF not yet implemented ******");
        }
        PREFS.put(FLOW, flowc.toString());
        /*
         * Generate the result
         */
        CommSetup result = new CommSetup(
                dialog.jRBSelSerial.isSelected(),
                dialog.jRBSelTCP.isSelected(),
                (String) dialog.jCBOXComm.getSelectedItem(),
                (String) dialog.jCMBOBaud.getSelectedItem(),
                // (String) dialog.jCBRadio.getSelectedItem(),
                sPortParity, sPortStopBits, sPortDataBits,
                flowc,
                dialog.jTFHost.getText(),
                dialog.jTFPort.getText());

        /*
         * dispose the window and return
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                dialog.dispose();
            }
        });

        return result;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bGDwidth;
    private javax.swing.ButtonGroup bGParity;
    private javax.swing.ButtonGroup bGStop;
    private javax.swing.ButtonGroup bGtype;
    private javax.swing.ButtonGroup bgflowctl;
    private javax.swing.JButton jBCancel;
    private javax.swing.JButton jBOK;
    private javax.swing.JComboBox jCBOXComm;
    private javax.swing.JComboBox jCMBOBaud;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelRadio;
    private javax.swing.JRadioButton jRBParityEven;
    private javax.swing.JRadioButton jRBParityNone;
    private javax.swing.JRadioButton jRBParityOdd;
    private javax.swing.JRadioButton jRBSelSerial;
    private javax.swing.JRadioButton jRBSelTCP;
    private javax.swing.JRadioButton jRBdatabits5;
    private javax.swing.JRadioButton jRBdatabits6;
    private javax.swing.JRadioButton jRBdatabits7;
    private javax.swing.JRadioButton jRBdatabits8;
    private javax.swing.JRadioButton jRBstop1;
    private javax.swing.JRadioButton jRBstop15;
    private javax.swing.JRadioButton jRBstop2;
    private javax.swing.JRadioButton jRFCNone;
    private javax.swing.JRadioButton jRFCrts;
    private javax.swing.JRadioButton jRFCxon;
    private javax.swing.JTextField jTFHost;
    private javax.swing.JTextField jTFPort;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
